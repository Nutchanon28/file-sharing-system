// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"github.com/99designs/gqlgen/graphql"
)

type Department struct {
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	FacultyID string   `json:"facultyId"`
	Faculty   *Faculty `json:"faculty"`
	Users     []*User  `json:"users,omitempty"`
}

type Faculty struct {
	ID          string        `json:"id"`
	Name        string        `json:"name"`
	Departments []*Department `json:"departments"`
}

type Mutations struct {
	UploadFile *SharedFile `json:"uploadFile"`
}

type NewSharedFile struct {
	Status Status         `json:"status"`
	Name   string         `json:"name"`
	File   graphql.Upload `json:"file"`
	UserID string         `json:"userId"`
}

type Query struct {
}

type SharedFile struct {
	ID        string `json:"id"`
	Status    Status `json:"status"`
	Name      string `json:"name"`
	FileURL   string `json:"fileUrl"`
	CreatedBy *User  `json:"createdBy"`
	CreatedAt string `json:"createdAt"`
	UpdatedAt string `json:"updatedAt"`
}

type User struct {
	ID           string        `json:"id"`
	Role         Role          `json:"role"`
	Name         string        `json:"name"`
	Surname      string        `json:"surname"`
	Email        string        `json:"email"`
	Mobile       string        `json:"mobile"`
	DepartmentID string        `json:"departmentId"`
	Department   *Department   `json:"department"`
	SharedFiles  []*SharedFile `json:"sharedFiles,omitempty"`
}

type Role string

const (
	RoleUser  Role = "User"
	RoleAdmin Role = "Admin"
)

var AllRole = []Role{
	RoleUser,
	RoleAdmin,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleUser, RoleAdmin:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Status string

const (
	StatusPrivate        Status = "Private"
	StatusAdminOnly      Status = "AdminOnly"
	StatusDepartmentOnly Status = "DepartmentOnly"
	StatusPublic         Status = "Public"
)

var AllStatus = []Status{
	StatusPrivate,
	StatusAdminOnly,
	StatusDepartmentOnly,
	StatusPublic,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusPrivate, StatusAdminOnly, StatusDepartmentOnly, StatusPublic:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
