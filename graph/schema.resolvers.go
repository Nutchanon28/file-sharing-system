package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"
	"fmt"
	"io"
	"os"

	"github.com/Nutchanon28/file-sharing-system/graph/model"
	"github.com/google/uuid"
	"github.com/minio/minio-go/v7"
)

// UploadFile is the resolver for the uploadFile field.
func (r *mutationResolver) UploadFile(ctx context.Context, newSharedFile model.NewSharedFile) (*model.SharedFile, error) {
	// Generate a unique filename
	id := uuid.New().String()
	// uniqueFilename := fmt.Sprintf("%s-%s", id, newSharedFile.File.Filename)

	// Create a temporary file to store the uploaded data
	tmpfile, err := os.CreateTemp("/tmp", "testdata")
	if err != nil {
		return nil, fmt.Errorf("failed to create temp file: %w", err)
	}

	defer func() {
		tmpfile.Close()
		if err != nil {
			os.Remove(tmpfile.Name())
		}
	}()

	// Write the uploaded file content to the temp file
	_, err = io.Copy(tmpfile, newSharedFile.File.File) // Assuming `newSharedFile.File.File` is the uploaded file's reader
	if err != nil {
		return nil, fmt.Errorf("failed to write file content to temp file: %w", err)
	}

	// Upload the test file
	// Change the value of filePath if the file is in another location
	objectName := "cringe.jpeg"
	// Hey ChatGPT, there's an error: open /tmp/testdata: no such file or directory
	// filePath := "/tmp/testdata"
	contentType := "application/octet-stream"

	// Upload the test file with FPutObject
	info, err := r.MinioClient.FPutObject(ctx, "cng", objectName, tmpfile.Name(), minio.PutObjectOptions{ContentType: contentType})
	if err != nil {
		fmt.Println(err)
		return nil, err
	}

	fmt.Println("info is ", info)

	fileUrl, err := r.MinioUseCase.GetPresignedUrl(ctx, objectName)

	if err != nil {
		return nil, err
	}

	sharedFile := model.SharedFile{
		ID:        id,
		Status:    newSharedFile.Status,
		Name:      newSharedFile.Name,
		FileURL:   *fileUrl,
		CreatedBy: nil,
		// CreatedBy: newSharedFile.UserID,
	}

	r.SharedFilesList = append(r.SharedFilesList, &sharedFile)

	return &sharedFile, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// Departments is the resolver for the departments field.
func (r *queryResolver) Departments(ctx context.Context) ([]*model.Department, error) {
	panic(fmt.Errorf("not implemented: Departments - departments"))
}

// Faculties is the resolver for the faculties field.
func (r *queryResolver) Faculties(ctx context.Context) ([]*model.Faculty, error) {
	panic(fmt.Errorf("not implemented: Faculties - faculties"))
}

// SharedFiles is the resolver for the sharedFiles field.
func (r *queryResolver) SharedFiles(ctx context.Context) ([]*model.SharedFile, error) {
	fmt.Println("get all shared files ran")
	return r.SharedFilesList, nil
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, id string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: GetUser - getUser"))
}

// GetDepartment is the resolver for the getDepartment field.
func (r *queryResolver) GetDepartment(ctx context.Context, id string) (*model.Department, error) {
	panic(fmt.Errorf("not implemented: GetDepartment - getDepartment"))
}

// GetFaculty is the resolver for the getFaculty field.
func (r *queryResolver) GetFaculty(ctx context.Context, id string) (*model.Faculty, error) {
	panic(fmt.Errorf("not implemented: GetFaculty - getFaculty"))
}

// GetSharedFile is the resolver for the getSharedFile field.
func (r *queryResolver) GetSharedFile(ctx context.Context, id string) (*model.SharedFile, error) {
	panic(fmt.Errorf("not implemented: GetSharedFile - getSharedFile"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
